/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ieepo.checador;

import com.ieepo.checador.components.Imagen;
import com.ieepo.checador.db.ConnectionBD;
import com.ieepo.checador.model.AdminCt;
import com.ieepo.checador.model.Empleado;
import com.ieepo.checador.model.Horario;
import com.ieepo.checador.model.HorarioEmpleado;
import java.awt.Dimension;
import java.lang.reflect.InvocationTargetException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.TimerTask;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author varguelles
 */
public class Checador extends javax.swing.JApplet {

    private String hora, minutos, segundos, ampm, dia, mes, noDia, anio;
    private Calendar calendario;

    private final int minutos_normal = 10;
    private final int minutos_retardo = 30;

    private DigitalPersona dp;

    private final int id_ct = 6155;

    TimerTask task;
    TimerTask taskHuellas;
    Runnable tareaLogin;
    ScheduledExecutorService timerLogin;

    ArrayList<Empleado> admins;
    Boolean adminActivo = false;
    Boolean cuentaActiva = false;
    Boolean estaVisibleAnteriorMente = false; // para saber si esta visible la parte del nombre del empleado cuando se registra
    int checar;
    int estaLogin; //para saber si la pantalla esta en login

    ArrayList<Empleado> empleados;
    int id_empleado;

    /**
     * Initializes the applet Checador
     */
    @Override
    public void init() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Checador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the applet */
        try {
            java.awt.EventQueue.invokeAndWait(() -> {
                initComponents();

                setSize(new Dimension(1000, 600));
                setMinimumSize(new Dimension(800, 500));

                jpFondo.setVisible(false);

                Imagen i = new Imagen("com/ieepo/checador/images/logo.png", (int) (jpLogo.getPreferredSize().width * 0.4), jpLogoPng.getPreferredSize().height);
                jpLogoPng.add(i);
                jpLogoPng.repaint();

                dp = new DigitalPersona();
                dp.Iniciar();
                dp.start();

                empleados();

                hora();
                final Runnable tarea = () -> {
                    hora();
                };

                ScheduledExecutorService timer = Executors.newSingleThreadScheduledExecutor();
                timer.scheduleAtFixedRate(tarea, 1, 1, TimeUnit.SECONDS);

            });
        } catch (InterruptedException | InvocationTargetException ex) {
            Logger.getLogger(Checador.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pmMenu = new javax.swing.JPopupMenu();
        Acceder = new javax.swing.JMenuItem();
        jpLogo = new org.jdesktop.swingx.JXPanel();
        jpLogoPng = new org.jdesktop.swingx.JXPanel();
        lbTitulo = new org.jdesktop.swingx.JXLabel();
        jpSection = new org.jdesktop.swingx.JXPanel();
        jpChecador = new org.jdesktop.swingx.JXPanel();
        lbDiaMes = new org.jdesktop.swingx.JXLabel();
        lbEmpTot = new org.jdesktop.swingx.JXLabel();
        lbEmpleadosTotales = new org.jdesktop.swingx.JXLabel();
        jXPanel1 = new org.jdesktop.swingx.JXPanel();
        lbBienvenido = new org.jdesktop.swingx.JXLabel();
        lbEmpleado = new org.jdesktop.swingx.JXLabel();
        lbTipo = new org.jdesktop.swingx.JXLabel();
        jXPanel2 = new org.jdesktop.swingx.JXPanel();
        lbHora = new org.jdesktop.swingx.JXLabel();
        lbEmpleadosPresentes = new org.jdesktop.swingx.JXLabel();
        lbEmpPr = new org.jdesktop.swingx.JXLabel();
        lbEmpRet = new org.jdesktop.swingx.JXLabel();
        lbEmpleadosRetardo = new org.jdesktop.swingx.JXLabel();
        lbEmpRet1 = new org.jdesktop.swingx.JXLabel();
        lbEmpleadosAusentes = new org.jdesktop.swingx.JXLabel();
        lbEmpRet3 = new org.jdesktop.swingx.JXLabel();
        lbEmpleadosFaltantes = new org.jdesktop.swingx.JXLabel();
        lbMenu = new org.jdesktop.swingx.JXLabel();
        jpFondo = new org.jdesktop.swingx.JXPanel();
        jpLogin = new org.jdesktop.swingx.JXPanel();
        lbAdmin = new org.jdesktop.swingx.JXLabel();
        cmbAdmin = new javax.swing.JComboBox<>();
        jpHuellas = new org.jdesktop.swingx.JXPanel();

        Acceder.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        Acceder.setText("Acceder");
        Acceder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AccederActionPerformed(evt);
            }
        });
        pmMenu.add(Acceder);

        setPreferredSize(new java.awt.Dimension(1000, 600));

        jpLogo.setBackground(new java.awt.Color(255, 255, 255));
        jpLogo.setPreferredSize(new java.awt.Dimension(1000, 100));

        jpLogoPng.setBackground(new java.awt.Color(255, 255, 255));
        jpLogoPng.setPreferredSize(new java.awt.Dimension(500, 78));

        javax.swing.GroupLayout jpLogoPngLayout = new javax.swing.GroupLayout(jpLogoPng);
        jpLogoPng.setLayout(jpLogoPngLayout);
        jpLogoPngLayout.setHorizontalGroup(
            jpLogoPngLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );
        jpLogoPngLayout.setVerticalGroup(
            jpLogoPngLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        lbTitulo.setText("Control de Asistencia");
        lbTitulo.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N

        javax.swing.GroupLayout jpLogoLayout = new javax.swing.GroupLayout(jpLogo);
        jpLogo.setLayout(jpLogoLayout);
        jpLogoLayout.setHorizontalGroup(
            jpLogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpLogoLayout.createSequentialGroup()
                .addContainerGap(48, Short.MAX_VALUE)
                .addComponent(lbTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 257, Short.MAX_VALUE)
                .addComponent(jpLogoPng, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jpLogoLayout.setVerticalGroup(
            jpLogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpLogoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpLogoPng, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jpLogoLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(lbTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jpSection.setBackground(new java.awt.Color(255, 255, 255));
        jpSection.setPreferredSize(new java.awt.Dimension(1000, 500));

        jpChecador.setBackground(new java.awt.Color(255, 255, 255));
        jpChecador.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jpChecador.setPreferredSize(new java.awt.Dimension(1000, 500));

        lbDiaMes.setForeground(new java.awt.Color(51, 153, 255));
        lbDiaMes.setText("Jueves 11 de Octubre de 2018");
        lbDiaMes.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N

        lbEmpTot.setForeground(new java.awt.Color(51, 153, 255));
        lbEmpTot.setText("Empleados totales:");
        lbEmpTot.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        lbEmpleadosTotales.setForeground(new java.awt.Color(51, 153, 255));
        lbEmpleadosTotales.setText("41");
        lbEmpleadosTotales.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        jXPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jXPanel1.setPreferredSize(new java.awt.Dimension(300, 100));

        lbBienvenido.setForeground(new java.awt.Color(51, 153, 255));
        lbBienvenido.setText("Bienvenido:");
        lbBienvenido.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        lbEmpleado.setForeground(new java.awt.Color(51, 153, 255));
        lbEmpleado.setText("Victor Manuel Arguelles Alcazar");
        lbEmpleado.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        lbTipo.setForeground(new java.awt.Color(51, 153, 255));
        lbTipo.setText("FALTA");
        lbTipo.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        javax.swing.GroupLayout jXPanel1Layout = new javax.swing.GroupLayout(jXPanel1);
        jXPanel1.setLayout(jXPanel1Layout);
        jXPanel1Layout.setHorizontalGroup(
            jXPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jXPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jXPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lbEmpleado, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jXPanel1Layout.createSequentialGroup()
                            .addComponent(lbBienvenido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(269, 269, 269))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jXPanel1Layout.setVerticalGroup(
            jXPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbBienvenido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jXPanel2.setBackground(new java.awt.Color(255, 255, 255));

        lbHora.setForeground(new java.awt.Color(51, 153, 255));
        lbHora.setText("10:30 AM");
        lbHora.setFont(new java.awt.Font("Arial", 0, 48)); // NOI18N

        javax.swing.GroupLayout jXPanel2Layout = new javax.swing.GroupLayout(jXPanel2);
        jXPanel2.setLayout(jXPanel2Layout);
        jXPanel2Layout.setHorizontalGroup(
            jXPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXPanel2Layout.createSequentialGroup()
                .addComponent(lbHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jXPanel2Layout.setVerticalGroup(
            jXPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lbEmpleadosPresentes.setForeground(new java.awt.Color(51, 153, 255));
        lbEmpleadosPresentes.setText("41");
        lbEmpleadosPresentes.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        lbEmpPr.setForeground(new java.awt.Color(51, 153, 255));
        lbEmpPr.setText("Empleados presentes:");
        lbEmpPr.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        lbEmpRet.setForeground(new java.awt.Color(51, 153, 255));
        lbEmpRet.setText("Empleados con retardo:");
        lbEmpRet.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        lbEmpleadosRetardo.setForeground(new java.awt.Color(51, 153, 255));
        lbEmpleadosRetardo.setText("41");
        lbEmpleadosRetardo.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        lbEmpRet1.setForeground(new java.awt.Color(51, 153, 255));
        lbEmpRet1.setText("Empleados con falta:");
        lbEmpRet1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        lbEmpleadosAusentes.setForeground(new java.awt.Color(51, 153, 255));
        lbEmpleadosAusentes.setText("41");
        lbEmpleadosAusentes.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        lbEmpRet3.setForeground(new java.awt.Color(51, 153, 255));
        lbEmpRet3.setText("Empleados faltantes");
        lbEmpRet3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        lbEmpleadosFaltantes.setForeground(new java.awt.Color(51, 153, 255));
        lbEmpleadosFaltantes.setText("41");
        lbEmpleadosFaltantes.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        lbMenu.setForeground(new java.awt.Color(51, 153, 255));
        lbMenu.setText("Menu▼");
        lbMenu.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lbMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbMenuMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jpChecadorLayout = new javax.swing.GroupLayout(jpChecador);
        jpChecador.setLayout(jpChecadorLayout);
        jpChecadorLayout.setHorizontalGroup(
            jpChecadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpChecadorLayout.createSequentialGroup()
                .addGroup(jpChecadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jpChecadorLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(lbDiaMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addGroup(jpChecadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jpChecadorLayout.createSequentialGroup()
                                .addComponent(lbEmpTot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbEmpleadosTotales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jpChecadorLayout.createSequentialGroup()
                                .addComponent(lbEmpPr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbEmpleadosPresentes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(40, 40, 40)
                        .addGroup(jpChecadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbEmpRet1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbEmpRet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpChecadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpChecadorLayout.createSequentialGroup()
                                .addComponent(lbEmpleadosRetardo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                                .addComponent(lbEmpRet3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbEmpleadosFaltantes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jpChecadorLayout.createSequentialGroup()
                                .addComponent(lbEmpleadosAusentes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jpChecadorLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jXPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(90, 90, 90)
                        .addComponent(jXPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpChecadorLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100)))
                .addGap(29, 29, 29))
        );
        jpChecadorLayout.setVerticalGroup(
            jpChecadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpChecadorLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(lbMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jpChecadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jXPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jXPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(169, 169, 169)
                .addGroup(jpChecadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpChecadorLayout.createSequentialGroup()
                        .addGroup(jpChecadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbEmpTot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbEmpleadosTotales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbEmpRet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbEmpleadosRetardo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpChecadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpChecadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lbEmpPr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbEmpleadosPresentes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jpChecadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lbEmpRet1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbEmpleadosAusentes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(lbDiaMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpChecadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbEmpRet3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbEmpleadosFaltantes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(148, 148, 148))
        );

        jpFondo.setBackground(new java.awt.Color(255, 255, 255));
        jpFondo.setPreferredSize(new java.awt.Dimension(1000, 500));

        jpLogin.setBackground(new java.awt.Color(255, 255, 255));
        jpLogin.setPreferredSize(new java.awt.Dimension(1000, 500));

        lbAdmin.setText("Seleccione al administrador:");

        cmbAdmin.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        cmbAdmin.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbAdmin.setPreferredSize(new java.awt.Dimension(350, 40));

        javax.swing.GroupLayout jpLoginLayout = new javax.swing.GroupLayout(jpLogin);
        jpLogin.setLayout(jpLoginLayout);
        jpLoginLayout.setHorizontalGroup(
            jpLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpLoginLayout.createSequentialGroup()
                .addContainerGap(325, Short.MAX_VALUE)
                .addGroup(jpLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(325, Short.MAX_VALUE))
        );
        jpLoginLayout.setVerticalGroup(
            jpLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpLoginLayout.createSequentialGroup()
                .addGap(166, 166, 166)
                .addComponent(lbAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(269, Short.MAX_VALUE))
        );

        jpHuellas.setBackground(new java.awt.Color(255, 153, 153));
        jpHuellas.setPreferredSize(new java.awt.Dimension(1000, 500));

        javax.swing.GroupLayout jpHuellasLayout = new javax.swing.GroupLayout(jpHuellas);
        jpHuellas.setLayout(jpHuellasLayout);
        jpHuellasLayout.setHorizontalGroup(
            jpHuellasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jpHuellasLayout.setVerticalGroup(
            jpHuellasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jpFondoLayout = new javax.swing.GroupLayout(jpFondo);
        jpFondo.setLayout(jpFondoLayout);
        jpFondoLayout.setHorizontalGroup(
            jpFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFondoLayout.createSequentialGroup()
                .addGroup(jpFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jpHuellas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jpFondoLayout.setVerticalGroup(
            jpFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFondoLayout.createSequentialGroup()
                .addComponent(jpLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jpHuellas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jpSectionLayout = new javax.swing.GroupLayout(jpSection);
        jpSection.setLayout(jpSectionLayout);
        jpSectionLayout.setHorizontalGroup(
            jpSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpSectionLayout.createSequentialGroup()
                .addGroup(jpSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpChecador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jpFondo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jpSectionLayout.setVerticalGroup(
            jpSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpSectionLayout.createSequentialGroup()
                .addComponent(jpChecador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jpFondo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpLogo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jpSection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jpLogo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jpSection, javax.swing.GroupLayout.DEFAULT_SIZE, 1000, Short.MAX_VALUE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void lbMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbMenuMouseClicked
        // TODO add your handling code here:
        pmMenu.show(this, evt.getX(), evt.getY());
        pmMenu.setLocation(evt.getLocationOnScreen().x - lbMenu.getWidth(), evt.getLocationOnScreen().y);

    }//GEN-LAST:event_lbMenuMouseClicked

    private void AccederActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AccederActionPerformed
        // TODO add your handling code here:
        System.out.println("entra aqui primero");
        jpChecador.setVisible(false);

        //taparTodo();
        jpFondo.setVisible(true);
        jpSection.setVisible(true);
        jpLogin.setVisible(true);

        ConnectionBD sql = new ConnectionBD();
        Connection cn = sql.conectar();
        PreparedStatement consulta;

        admins = new ArrayList<>();
        try {
            consulta = cn.prepareStatement("SELECT * FROM admincts WHERE idct = ?");
            consulta.setInt(1, id_ct);
            ResultSet resultado = consulta.executeQuery();

            while (resultado.next()) {
                int id_admin_ct;

                id_admin_ct = resultado.getInt("idadmin");
                id_empleado = resultado.getInt("idempleado");

                AdminCt a = new AdminCt(id_admin_ct, id_empleado, id_ct);
                consulta = cn.prepareStatement("SELECT * FROM empleados WHERE idempleado = ?");
                consulta.setInt(1, a.getId_empleado());
                ResultSet resultadoEmpleados = consulta.executeQuery();

                while (resultadoEmpleados.next()) {
                    int idEmpleado;
                    String nombre;
                    String apPaterno;
                    String apMaterno;
                    String rfc;
                    int idct;

                    idEmpleado = resultadoEmpleados.getInt("idempleado");
                    nombre = resultadoEmpleados.getString("nombre").trim();
                    apPaterno = resultadoEmpleados.getString("apPaterno").trim();
                    apMaterno = resultadoEmpleados.getString("apMaterno").trim();
                    rfc = resultadoEmpleados.getString("rfc").trim();
                    idct = resultadoEmpleados.getInt("idct");

                    Empleado e = new Empleado(idEmpleado, nombre, apPaterno, apMaterno, rfc, idct);
                    admins.add(e);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(Checador.class.getName()).log(Level.SEVERE, null, ex);
        }

        cmbAdmin.removeAllItems();
        admins.forEach((admin) -> {
            cmbAdmin.addItem(admin.toString());
        });
        adminActivo = true;
        estaLogin = 1;
        checar = validarAdmin(0, estaLogin);
        tareaLogin = () -> {
            checar = validarAdmin(checar, estaLogin);
        };
        timerLogin = Executors.newSingleThreadScheduledExecutor();
        timerLogin.scheduleAtFixedRate(tareaLogin, 1, 1, TimeUnit.SECONDS);


    }//GEN-LAST:event_AccederActionPerformed

    private void hora() {
        calendario = new GregorianCalendar();
        java.util.Date fechaHoraActual = new java.util.Date();

        calendario.setTime(fechaHoraActual);
        ampm = calendario.get(Calendar.AM_PM) == Calendar.AM ? "AM" : "PM";

        if (ampm.equals("PM")) {
            int h = calendario.get(Calendar.HOUR_OF_DAY); //-12
            hora = h > 9 ? "" + h : "0" + h;
        } else {
            hora = calendario.get(Calendar.HOUR_OF_DAY) > 9 ? "" + calendario.get(Calendar.HOUR_OF_DAY) : "0" + calendario.get(Calendar.HOUR_OF_DAY);
        }
        minutos = calendario.get(Calendar.MINUTE) > 9 ? "" + calendario.get(Calendar.MINUTE) : "0" + calendario.get(Calendar.MINUTE);
        segundos = calendario.get(Calendar.SECOND) > 9 ? "" + calendario.get(Calendar.SECOND) : "0" + calendario.get(Calendar.SECOND);

        noDia = calendario.get(Calendar.DAY_OF_MONTH) + "";
        mes = (calendario.get(Calendar.MONTH) + 1) > 9 ? (calendario.get(Calendar.MONTH) + 1) + "" : "0" + (calendario.get(Calendar.MONTH) + 1);
        anio = calendario.get(Calendar.YEAR) + "";

        dia = getDia(calendario.get(Calendar.DAY_OF_WEEK));
        mes = getMes(mes);

        dia = dia.toLowerCase();
        mes = mes.toLowerCase();
        dia = Character.toUpperCase(dia.charAt(0)) + dia.substring(1);
        mes = Character.toUpperCase(mes.charAt(0)) + mes.substring(1);

        lbDiaMes.setText(dia + " " + noDia + " de " + mes + " de " + anio);
        //lbHora.setText(hora + ":" + minutos + " " + ampm);
        lbHora.setText(hora + ":" + minutos + ":" + segundos + " " + ampm);

        if (lbBienvenido.isVisible() && !estaVisibleAnteriorMente) {
            lbBienvenido.setVisible(false);
            lbEmpleado.setVisible(false);
            lbTipo.setVisible(false);
            estaVisibleAnteriorMente = true;
        }
        validarActivo();
    }

    private String getDia(int c) {
        String dia_aux;
        switch (c) {
            case 1:
                dia_aux = "DOMINGO";
                break;
            case 2:
                dia_aux = "LUNES";
                break;
            case 3:
                dia_aux = "MARTES";
                break;
            case 4:
                dia_aux = "MIÉRCOLES";
                break;
            case 5:
                dia_aux = "JUEVES";
                break;
            case 6:
                dia_aux = "VIERNES";
                break;
            case 7:
                dia_aux = "SÁBADO";
                break;
            default:
                dia_aux = "";
        }
        return dia_aux;
    }

    private String getMes(String c) {
        String mes_aux;
        switch (c) {
            case "01":
                mes_aux = "ENRERO";
                break;
            case "02":
                mes_aux = "FEBRERO";
                break;
            case "03":
                mes_aux = "MARZO";
                break;
            case "04":
                mes_aux = "ABRIL";
                break;
            case "05":
                mes_aux = "MAYO";
                break;
            case "06":
                mes_aux = "JUNIO";
                break;
            case "07":
                mes_aux = "JULIO";
                break;
            case "08":
                mes_aux = "AGOSTO";
                break;
            case "09":
                mes_aux = "SEPTIEMBRE";
                break;
            case "10":
                mes_aux = "OCTUBRE";
                break;
            case "11":
                mes_aux = "NOVIEMBRE";
                break;
            case "12":
                mes_aux = "DICIEMBRE";
                break;
            default:
                mes_aux = "";
        }
        return mes_aux;
    }

    private void validarActivo() {

        Boolean activo = dp.getActivo();
        if (activo && !adminActivo) {
            try {
                ConnectionBD sql = new ConnectionBD();

                Connection cn = sql.conectar();
                PreparedStatement consulta;
                consulta = cn.prepareStatement("SELECT * FROM huella");
                ResultSet resultado = consulta.executeQuery();
                while (resultado.next()) {
                    byte templateBuffer[] = resultado.getBytes("huella");
                    if (dp.verificarHuella(templateBuffer)) {
                        mandar(resultado.getInt("idempleado"));
                        dp.clear();
                    } else {
                        System.out.println("no");
                    }
                }
                dp.clear();
            } catch (SQLException ex) {
                Logger.getLogger(Checador.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
        }
    }

    private void mandar(int id_empleado) {
        try {
            ConnectionBD sql = new ConnectionBD();
            Connection cn = sql.conectar();
            PreparedStatement consulta;
            consulta = cn.prepareStatement("SELECT * FROM horarioempleado WHERE idempleado = ?");
            consulta.setInt(1, id_empleado);
            ResultSet resultado = consulta.executeQuery();
            System.out.println(id_empleado);
            System.out.println("consulta: " + consulta);

            if (resultado.next()) {
                int id_horario_empleado;
                Date fecha_asigna_hora;
                int id_horario;
                int id_area_e;

                id_horario_empleado = resultado.getInt("idhorarioempleado");
                fecha_asigna_hora = resultado.getDate("fechaasignahora");
                id_horario = resultado.getInt("idhorario");
                id_area_e = resultado.getInt("idarea");

                HorarioEmpleado he = new HorarioEmpleado(id_horario_empleado, id_empleado, id_ct, fecha_asigna_hora, id_horario, id_area_e);

                consulta = cn.prepareStatement("SELECT * FROM horarios WHERE idhorario = ?");
                consulta.setInt(1, id_horario);
                ResultSet resultadoH = consulta.executeQuery();
                if (resultadoH.next()) {
                    int id_turno;
                    Time hora_entrada;
                    Time hora_salida;
                    Time hora_entrada_v;
                    Time hora_salida_v;

                    id_turno = resultadoH.getInt("idturno");
                    hora_entrada = resultadoH.getTime("horaentrada");
                    hora_salida = resultadoH.getTime("horasalida");
                    hora_entrada_v = resultadoH.getTime("horaentradav");
                    hora_salida_v = resultadoH.getTime("horasalidav");

                    Horario h = new Horario(id_horario, id_turno, hora_entrada, hora_salida, hora_entrada_v, hora_salida_v);

                    calendario = new GregorianCalendar();
                    java.util.Date d = new java.util.Date();

                    DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    Date date = new Date();
                    String fecha = dateFormat.format(date);
                    System.out.println(dateFormat.format(date));
                    System.out.println(fecha.substring(0, 11));

                    consulta = cn.prepareStatement("SELECT * FROM incidencias WHERE idctlocal = ? and idempleado = ? and fechahora like ?");
                    consulta.setInt(1, id_ct);
                    consulta.setInt(2, id_empleado);
                    consulta.setString(3, fecha.substring(0, 11) + "%");
                    ResultSet resultadoIncidencias = consulta.executeQuery();
                    int contador = 0;

                    if (hora_entrada_v == null && hora_salida_v == null) {
                        System.out.println("dos veces");
                        System.out.println(consulta);
                        while (resultadoIncidencias.next()) {
                            contador++;
                        }

                        if (contador == 2) {
                            System.out.println("Ya no puede registrarte mas de dos veces en el dia");
                            JOptionPane.showMessageDialog(null, "Ya no puedes registrarte mas en este dia", "Error", JOptionPane.ERROR_MESSAGE);
                        } else {
                            if (contador == 1) {
                                System.out.println("salida");
                                Time horaEComparar = new Time(Integer.parseInt(fecha.substring(11, 13)), Integer.parseInt(fecha.substring(14, 16)), Integer.parseInt(fecha.substring(17, 19)));
                                Time horaDBComparar = h.getHora_salida();

                                String tipo = compararSalida(horaEComparar, horaDBComparar);
                                PreparedStatement ps = cn.prepareStatement("INSERT INTO incidencias(idempleado, fechahora, idctlocal, movimiento, tipo) VALUES (?,?,?,?,?)");
                                ps.setInt(1, id_empleado);
                                ps.setString(2, fecha);
                                ps.setInt(3, id_ct);
                                ps.setString(4, "SALIDA");
                                ps.setString(5, tipo);
                                System.out.println(ps);
                                ps.executeUpdate();

                                bienvenido(id_empleado, fecha, id_ct, "SALIDA", tipo);
                            } else {
                                System.out.println("entrada");
                                Time horaEComparar = new Time(Integer.parseInt(fecha.substring(11, 13)), Integer.parseInt(fecha.substring(14, 16)), Integer.parseInt(fecha.substring(17, 19)));
                                Time horaDBComparar = h.getHora_entrada();

                                String tipo = compararEntrada(horaEComparar, horaDBComparar);
                                PreparedStatement ps = cn.prepareStatement("INSERT INTO incidencias(idempleado, fechahora, idctlocal, movimiento, tipo) VALUES (?,?,?,?,?)");
                                ps.setInt(1, id_empleado);
                                ps.setString(2, fecha);
                                ps.setInt(3, id_ct);
                                ps.setString(4, "ENTRADA");
                                ps.setString(5, tipo);
                                ps.executeUpdate();

                                bienvenido(id_empleado, fecha, id_ct, "ENTRADA", tipo);
                                empleados();
                            }
                            /////////////////////

                        }
                    } else {
                        System.out.println("cuatro veces");
                        System.out.println(consulta);
                        while (resultadoIncidencias.next()) {
                            contador++;
                        }

                        if (contador == 4) {
                            System.out.println("Ya no puede registrarte mas de dos veces en el dia");
                            JOptionPane.showMessageDialog(null, "Ya no puedes registrarte mas en este dia", "Error", JOptionPane.ERROR_MESSAGE);
                        } else {
                            Time horaEComparar;
                            Time horaDBComparar;
                            String tipo;
                            PreparedStatement ps;
                            switch (contador) {
                                case 0:
                                    System.out.println("entrada");
                                    horaEComparar = new Time(Integer.parseInt(fecha.substring(11, 13)), Integer.parseInt(fecha.substring(14, 16)), Integer.parseInt(fecha.substring(17, 19)));
                                    horaDBComparar = h.getHora_entrada();

                                    tipo = compararEntrada(horaEComparar, horaDBComparar);
                                    ps = cn.prepareStatement("INSERT INTO incidencias(idempleado, fechahora, idctlocal, movimiento, tipo) VALUES (?,?,?,?,?)");
                                    ps.setInt(1, id_empleado);
                                    ps.setString(2, fecha);
                                    ps.setInt(3, id_ct);
                                    ps.setString(4, "ENTRADA");
                                    ps.setString(5, tipo);
                                    ps.executeUpdate();
                                    bienvenido(id_empleado, fecha, id_ct, "ENTRADA", tipo);
                                    empleados();
                                    break;
                                case 1:
                                    System.out.println("salida");
                                    horaEComparar = new Time(Integer.parseInt(fecha.substring(11, 13)), Integer.parseInt(fecha.substring(14, 16)), Integer.parseInt(fecha.substring(17, 19)));
                                    horaDBComparar = h.getHora_salida();

                                    tipo = compararSalida(horaEComparar, horaDBComparar);
                                    ps = cn.prepareStatement("INSERT INTO incidencias(idempleado, fechahora, idctlocal, movimiento, tipo) VALUES (?,?,?,?,?)");
                                    ps.setInt(1, id_empleado);
                                    ps.setString(2, fecha);
                                    ps.setInt(3, id_ct);
                                    ps.setString(4, "SALIDA");
                                    ps.setString(5, tipo);
                                    ps.executeUpdate();
                                    bienvenido(id_empleado, fecha, id_ct, "SALIDA", tipo);
                                    break;
                                case 2:
                                    System.out.println("entrada_v");
                                    horaEComparar = new Time(Integer.parseInt(fecha.substring(11, 13)), Integer.parseInt(fecha.substring(14, 16)), Integer.parseInt(fecha.substring(17, 19)));
                                    horaDBComparar = h.getHora_entrada_v();

                                    tipo = compararEntrada(horaEComparar, horaDBComparar);
                                    ps = cn.prepareStatement("INSERT INTO incidencias(idempleado, fechahora, idctlocal, movimiento, tipo) VALUES (?,?,?,?,?)");
                                    ps.setInt(1, id_empleado);
                                    ps.setString(2, fecha);
                                    ps.setInt(3, id_ct);
                                    ps.setString(4, "ENTRADA");
                                    ps.setString(5, tipo);
                                    ps.executeUpdate();
                                    bienvenido(id_empleado, fecha, id_ct, "ENTRADA", tipo);
                                    break;
                                case 3:
                                    System.out.println("salida_v");
                                    horaEComparar = new Time(Integer.parseInt(fecha.substring(11, 13)), Integer.parseInt(fecha.substring(14, 16)), Integer.parseInt(fecha.substring(17, 19)));
                                    horaDBComparar = h.getHora_salida_v();

                                    tipo = compararSalida(horaEComparar, horaDBComparar);
                                    ps = cn.prepareStatement("INSERT INTO incidencias(idempleado, fechahora, idctlocal, movimiento, tipo) VALUES (?,?,?,?,?)");
                                    ps.setInt(1, id_empleado);
                                    ps.setString(2, fecha);
                                    ps.setInt(3, id_ct);
                                    ps.setString(4, "SALIDA");
                                    ps.setString(5, tipo);
                                    ps.executeUpdate();
                                    bienvenido(id_empleado, fecha, id_ct, "SALIDA", tipo);
                                    break;
                            }
                        }
                    }
                } else {
                    System.out.println("Error");
                }
            } else {
                System.out.println("Error");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Checador.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String compararEntrada(Time horaEComparar, Time horaDBComparar) {
        if (horaEComparar.before(horaDBComparar)) {
            return "";
        }

        Time t = new Time(horaEComparar.getTime() - horaDBComparar.getTime());
        if (t.getHours() != 18) {
            return "FALTA";
        }
        if (t.getMinutes() < minutos_normal) {
            return "";
        }
        if (t.getMinutes() < minutos_retardo) {
            return "RETARDO";
        }
        return "FALTA";
    }

    private String compararSalida(Time horaEComparar, Time horaDBComparar) {
        System.out.println(" E: " + horaEComparar);
        System.out.println("DB: " + horaDBComparar);
        System.out.println(horaEComparar.after(horaDBComparar));

        if (horaEComparar.after(horaDBComparar)) {
            return "";
        }
        Time t = new Time(horaDBComparar.getTime() - horaEComparar.getTime());
        if (t.getHours() == 18 && t.getMinutes() < minutos_normal) {
            return "";
        }
        return "ANTICIPADA";
    }

    private void bienvenido(int id_empleado, String fecha, int id_ct, String movimiento, String tipo) {
        try {
            ConnectionBD sql = new ConnectionBD();
            Connection cn = sql.conectar();
            PreparedStatement consulta;
            consulta = cn.prepareStatement("SELECT * FROM empleados WHERE idempleado = ?");
            consulta.setInt(1, id_empleado);
            ResultSet resultado = consulta.executeQuery();

            if (resultado.next()) {
                int idEmpleado;
                String nombre;
                String apPaterno;
                String apMaterno;
                String rfc;
                int idct;

                idEmpleado = resultado.getInt("idempleado");
                nombre = resultado.getString("nombre").trim();
                apPaterno = resultado.getString("apPaterno").trim();
                apMaterno = resultado.getString("apMaterno").trim();
                rfc = resultado.getString("rfc").trim();
                idct = resultado.getInt("idct");

                Empleado e = new Empleado(idEmpleado, nombre, apPaterno, apMaterno, rfc, idct);

                if (movimiento.equals("ENTRADA")) {
                    lbBienvenido.setText("Bienvenido:");
                }
                if (movimiento.equals("SALIDA")) {
                    lbBienvenido.setText("Adios:");
                }
                lbEmpleado.setText(e.toString());
                lbTipo.setText(tipo);

                lbBienvenido.setVisible(true);
                lbEmpleado.setVisible(true);
                lbTipo.setVisible(true);
                estaVisibleAnteriorMente = false;
            }
        } catch (SQLException ex) {
            Logger.getLogger(Checador.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void empleados() {
        empleadosTotales();
        empleadosPresentes();
        empleadosRetardos();
        empleadosAusentes();
        empleadosFaltantes();

    }

    private int empleadosTotales() {
        try {
            ConnectionBD sql = new ConnectionBD();
            Connection cn = sql.conectar();
            PreparedStatement consulta;
            consulta = cn.prepareStatement("SELECT * FROM empleados WHERE idct = ?");
            consulta.setInt(1, id_ct);
            ResultSet resultado = consulta.executeQuery();
            int contador = 0;
            while (resultado.next()) {
                contador++;
            }
            lbEmpleadosTotales.setText(contador + "");
            return contador;
        } catch (SQLException ex) {
            Logger.getLogger(Checador.class.getName()).log(Level.SEVERE, null, ex);
        }
        return 0;
    }

    private void empleadosPresentes() {
        try {
            calendario = new GregorianCalendar();
            java.util.Date d = new java.util.Date();

            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            Date date = new Date();
            String fecha = dateFormat.format(date);

            ConnectionBD sql = new ConnectionBD();
            Connection cn = sql.conectar();
            PreparedStatement consulta;
            consulta = cn.prepareStatement("SELECT * FROM (SELECT * FROM incidencias WHERE idctlocal = ? and fechahora like ? and movimiento = 'ENTRADA'"
                    + "	GROUP BY idempleado) as t where t.tipo = ''");
            consulta.setInt(1, id_ct);
            consulta.setString(2, fecha.substring(0, 11) + "%");
            System.out.println("empleado presentes");
            System.out.println("consulta = " + consulta);

            ResultSet resultado = consulta.executeQuery();
            int contador = 0;
            while (resultado.next()) {
                contador++;
            }
            System.out.println("contador = " + contador);

            lbEmpleadosPresentes.setText(contador + "");
        } catch (SQLException ex) {
            Logger.getLogger(Checador.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void empleadosRetardos() {
        try {
            calendario = new GregorianCalendar();

            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            Date date = new Date();
            String fecha = dateFormat.format(date);

            ConnectionBD sql = new ConnectionBD();
            Connection cn = sql.conectar();
            PreparedStatement consulta;
            consulta = cn.prepareStatement("SELECT * FROM incidencias WHERE idctlocal = ? and fechahora like ? and movimiento = 'ENTRADA' and tipo = 'RETARDO' GROUP BY idempleado ORDER BY idincidencia, tipo");
            consulta.setInt(1, id_ct);
            consulta.setString(2, fecha.substring(0, 11) + "%");
            System.out.println("consulta = " + consulta);

            ResultSet resultado = consulta.executeQuery();
            int contador = 0;
            while (resultado.next()) {
                contador++;
            }
            System.out.println("contador = " + contador);

            lbEmpleadosRetardo.setText(contador + "");
        } catch (SQLException ex) {
            Logger.getLogger(Checador.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void empleadosAusentes() {
        try {
            calendario = new GregorianCalendar();

            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            Date date = new Date();
            String fecha = dateFormat.format(date);

            ConnectionBD sql = new ConnectionBD();
            Connection cn = sql.conectar();
            PreparedStatement consulta;
            consulta = cn.prepareStatement("SELECT * FROM incidencias WHERE idctlocal = ? and fechahora like ? and movimiento = 'ENTRADA' and tipo = 'FALTA' GROUP BY idempleado ORDER BY idincidencia, tipo");
            consulta.setInt(1, id_ct);
            consulta.setString(2, fecha.substring(0, 11) + "%");
            System.out.println("consulta = " + consulta);

            ResultSet resultado = consulta.executeQuery();
            int contador = 0;
            while (resultado.next()) {
                contador++;
            }
            System.out.println("contador = " + contador);

            lbEmpleadosAusentes.setText(contador + "");
        } catch (SQLException ex) {
            Logger.getLogger(Checador.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void empleadosFaltantes() {
        try {
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            Date date = new Date();
            String fecha = dateFormat.format(date);

            ConnectionBD sql = new ConnectionBD();
            Connection cn = sql.conectar();
            PreparedStatement consulta;
            consulta = cn.prepareStatement("SELECT * FROM incidencias WHERE idctlocal = ? and fechahora like ? and movimiento = 'ENTRADA' GROUP BY idempleado ORDER BY idincidencia");
            consulta.setInt(1, id_ct);
            consulta.setString(2, fecha.substring(0, 11) + "%");
            System.out.println("empleado faltantes");
            System.out.println("consulta = " + consulta);

            ResultSet resultado = consulta.executeQuery();
            int contador = 0;
            while (resultado.next()) {
                contador++;
            }
            System.out.println("contador = " + contador);

            lbEmpleadosFaltantes.setText((empleadosTotales() - contador) + "");
        } catch (SQLException ex) {
            Logger.getLogger(Checador.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private int validarAdmin(int checar, int el) {
        Boolean activo = dp.getActivo();
        if (el == 0) {
            return 0;
        }
        if (activo && adminActivo) {
            try {
                ConnectionBD sql = new ConnectionBD();
                Connection cn = sql.conectar();
                PreparedStatement consulta;
                int aux_id_empleado = admins.get(cmbAdmin.getSelectedIndex()).getIdEmpleado();
                consulta = cn.prepareStatement("SELECT * FROM huella WHERE idempleado = ?");
                consulta.setInt(1, aux_id_empleado);
                ResultSet resultado = consulta.executeQuery();
                System.out.println("aux_id_empleado = " + aux_id_empleado);

                while (resultado.next()) {
                    byte templateBuffer[] = resultado.getBytes("huella");
                    if (dp.verificarHuella(templateBuffer)) {
                        checar++;
                        cuentaActiva = true;
                        timerLogin.shutdown();
                        //status = false;
                        estaLogin = 0;
                        taparTodo();
                        jpSection.setVisible(true);
                        jpFondo.setVisible(true);
                        jpHuellas.setVisible(true);
                        //huellas();
                    }
                }
                System.out.println("checar = " + checar);
                System.out.println("activo = " + activo);
                if (checar == 0 && activo) {
                    dp.setActivo(false);
                    dp.clear();
                    System.out.println("checar = " + checar);
                    JOptionPane.showOptionDialog(null, "Acceso denegado", "Error", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE, null, null, null);
                }

            } catch (SQLException ex) {
                Logger.getLogger(Checador.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return checar;
    }

    private void taparTodo() {
        jpChecador.setVisible(false);
        jpFondo.setVisible(false);
        jpSection.setVisible(false);
        jpHuellas.setVisible(false);
        jpLogin.setVisible(false);
        //dp.clear();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Acceder;
    private javax.swing.JComboBox<String> cmbAdmin;
    private org.jdesktop.swingx.JXPanel jXPanel1;
    private org.jdesktop.swingx.JXPanel jXPanel2;
    private org.jdesktop.swingx.JXPanel jpChecador;
    private org.jdesktop.swingx.JXPanel jpFondo;
    private org.jdesktop.swingx.JXPanel jpHuellas;
    private org.jdesktop.swingx.JXPanel jpLogin;
    private org.jdesktop.swingx.JXPanel jpLogo;
    private org.jdesktop.swingx.JXPanel jpLogoPng;
    private org.jdesktop.swingx.JXPanel jpSection;
    private org.jdesktop.swingx.JXLabel lbAdmin;
    private org.jdesktop.swingx.JXLabel lbBienvenido;
    private org.jdesktop.swingx.JXLabel lbDiaMes;
    private org.jdesktop.swingx.JXLabel lbEmpPr;
    private org.jdesktop.swingx.JXLabel lbEmpRet;
    private org.jdesktop.swingx.JXLabel lbEmpRet1;
    private org.jdesktop.swingx.JXLabel lbEmpRet3;
    private org.jdesktop.swingx.JXLabel lbEmpTot;
    private org.jdesktop.swingx.JXLabel lbEmpleado;
    private org.jdesktop.swingx.JXLabel lbEmpleadosAusentes;
    private org.jdesktop.swingx.JXLabel lbEmpleadosFaltantes;
    private org.jdesktop.swingx.JXLabel lbEmpleadosPresentes;
    private org.jdesktop.swingx.JXLabel lbEmpleadosRetardo;
    private org.jdesktop.swingx.JXLabel lbEmpleadosTotales;
    private org.jdesktop.swingx.JXLabel lbHora;
    private org.jdesktop.swingx.JXLabel lbMenu;
    private org.jdesktop.swingx.JXLabel lbTipo;
    private org.jdesktop.swingx.JXLabel lbTitulo;
    private javax.swing.JPopupMenu pmMenu;
    // End of variables declaration//GEN-END:variables
}
